@DSL DefaultDSL;
@Behaviour MicromorphicDamageI_SpectralSplit;
@Author Thomas Helfer, Jérémy Bleyer;
@Date 21 / 09 / 2021;

@MaterialProperty stress E;
E.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@StateVariable stress Y;
Y.setEntryName("EnergyReleaseRate");

@ExternalStateVariable real d;
d.setGlossaryName("Damage");

@Parameter real kres = 1.e-6;

@LocalVariable stress lambda;
@LocalVariable stress mu;

@InitLocalVariables {
  lambda = computeLambda(E, nu);
  mu = computeMu(E, nu);
}

@LocalVariable stress Ytot;

@ProvidesSymmetricTangentOperator;
@Integrator{
  constexpr auto id = Stensor::Id();
  constexpr strain emin = 1.e-12;
  // positive part
  const auto f  = [](const real x){return x>0 ? x : 0;};
  // derivative of the positive part
  const auto df = [&emin](const real x)
    {return std::abs(x)<emin ? 0.5 : ((x<0) ? 0 : 1);};
  // computation of the stress, positive energy density and consistent
  // tangent operator
  const auto e = eval(eto + deto);
  const auto fdf     = e.computeIsotropicFunctionAndDerivative(f,df,emin*0.1);
  const auto& ep     = fdf.first;  // positive part of e
  const auto& dep_de = fdf.second; // derivative of the positive part of e
  const auto en = eval(e - ep);    // negative part of e
  // energy density
  const strain tr = trace(e);
  const strain tr_p = max(tr, real(0));
  const strain tr_n = min(tr, real(0));
  // stress computation
  const auto d_ets = d + dd;
  const auto gd = power<2>(1 - d_ets) + kres;
  sig = 2 * mu * (gd * ep + en) + lambda * (gd * tr_p + tr_n) * id;
  Y = (lambda / 2) * power<2>(tr_p) + mu * (ep | ep);
  Ytot = gd * Y + (lambda / 2) * power<2>(tr_n) + mu * (en | en);
  // consistent tangent operator (secant one here)
  if (computeTangentOperator_) {
    if (tr >= 0) {
      Dt = gd * (lambda * Stensor4::IxI() + 2 * mu * dep_de) +
           (2 * mu * (Stensor4::Id() - dep_de));
    } else {
      Dt = gd * 2 * mu * dep_de +
           (lambda * Stensor4::IxI() + 2 * mu * (Stensor4::Id() - dep_de));
    }
  }
  static_cast<void>(smt);
}

@InternalEnergy {
  Psi_s = Ytot;
}
